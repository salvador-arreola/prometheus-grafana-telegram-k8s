apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: monitoring
data:
  prometheus.rules: |-
    groups:
    - name: Alerts
      rules:
      
      - alert: High Node Memory
        expr: round((label_replace(sum(container_memory_working_set_bytes{id="/"}) by (instance), "node", "$0", "instance", "(.*)") > ignoring(instance,job,resource,unit) kube_node_status_capacity{resource="memory"} * 0.8) * 0.00000095367432)
        for: 1m
        labels:
          severity: critical
          value: "{{ $value }}"
        annotations:
          summary: High Memory Usage in Node
          
      - alert: High Pod Memory
        expr: round((container_memory_usage_bytes{container!~"|POD",pod!=""} >= (container_spec_memory_limit_bytes{container!~"|POD",pod!=""} != 0) * 0.8) * 0.00000095367432)
        for: 1m
        labels:
          severity: critical
          value: "{{ $value }}"
        annotations:
          summary: High Memory Usage in Pod
          
      - alert: High Cluster CPU
        expr: round(sum(rate(container_cpu_usage_seconds_total{id="/"}[1m])) by (node)/sum(machine_cpu_cores) by (node) * 100) > 60
        for: 1m
        labels:
          severity: critical
          value: "{{ $value }}"
        annotations:
          summary: High CPU Usage in all Cluster
          
      - alert: High Node CPU
        expr: round(sum(rate(container_cpu_usage_seconds_total{id="/"}[1m])) by (instance)/sum(machine_cpu_cores) by (instance) * 100) > 60
        for: 1m
        labels:
          severity: critical
          value: "{{ $value }}"
        annotations:
          summary: High CPU Usage in Node
          
      - alert: Node Failover
        expr: kube_node_status_condition{condition="Ready", status="false"} == 1 or kube_node_status_condition{condition="Ready", status="unknown"} == 1
        for: 1m
        labels:
          severity: critical
          value: "{{ $value }}"
        annotations:
          summary: Node in state NotRunning or Unknown
          
      - alert: Pod CrashLooping
        expr: increase(kube_pod_container_status_restarts_total[5m]) > 1
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: Kubernetes pod is crash looping
          
      - alert: Swap Memory
        expr: round((container_spec_memory_swap_limit_bytes > 0) * 0.00000095367432)
        for: 1m
        labels:
          severity: critical
          value: "{{ $value }}"
        annotations:
          summary: Node has activated swap memory
          
      - alert: High Disk Space
        expr: round((sum by(instance) (container_fs_usage_bytes{device=~"^/dev/xvd[a-z][1-9]$",id="/"}) / sum by(instance) (container_fs_limit_bytes{device=~"^/dev/xvd[a-z][1-9]$",id="/"}) * 100) > 70)
        for: 0m
        labels:
          severity: warning
          value: "{{ $value }}"
        annotations:
          summary: Disk space usage more than 70%

  prometheus.yml: |-
    global:
      scrape_interval: 20s
      evaluation_interval: 1m
    rule_files:
      - /etc/prometheus/prometheus.rules
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "alertmanager.monitoring.svc:9093"

    scrape_configs:
    
      - job_name: 'kube-state-metrics'
        static_configs:
        - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
      
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: kubernetes-nodes-cadvisor
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        metric_relabel_configs:
          - action: replace
            source_labels: [id]
            regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
            target_label: rkt_container_name
            replacement: '${2}-${1}'
          - action: replace
            source_labels: [id]
            regex: '^/system\.slice/(.+)\.service$'
            target_label: systemd_service_name
            replacement: '${1}'
      
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name